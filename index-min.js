class FontCompare{constructor(){const t={alpha:!1,desynchronized:!0,willReadFrequently:!0};this.font1input=document.querySelector("input[name=font1]"),this.font2input=document.querySelector("input[name=font2]"),this.backgroundColor="#fff",this.fillColor="#000",this.fontSize=500,this.canvases=new Map([["working",document.createElement("canvas")],["preview",document.querySelector(".preview canvas")],["transparent",document.createElement("canvas")]]),this.contexts=new Map([["working",this.canvases.get("working").getContext("2d",t)],["preview",this.canvases.get("preview").getContext("2d",t)],["transparent",this.canvases.get("transparent").getContext("2d",{...t,alpha:!0})]]),this.event=new Event("fontcompare"),this.canvasSize=2*this.fontSize,this.timeout=0,this.swapButton=document.querySelector(".fonts-and-colors button"),this.canvases.forEach((t=>{t.width=this.canvasSize,t.height=this.canvasSize}),this),this.contexts.forEach((t=>{t.textAlign="center",t.textRendering="geometricPrecision",this.resetContext(t)}),this),window.addEventListener("fontcompare",this.displayResults.bind(this)),document.querySelector(".results").addEventListener("click",this.resultsRowClick.bind(this)),this.init();const e=this.onFontChange.bind(this);this.font1input.addEventListener("change",e),this.font2input.addEventListener("change",e),this.swapButton.addEventListener("click",this.swapFonts.bind(this))}init(){this.font1=this.font1input.value,this.font2=this.font2input.value,this.rankDifferences("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890").then((()=>{this.restorePreview(),document.querySelector("[data-rank='1']").click()}))}restorePreview(){this.canvases.get("preview").dataset.currentIndex&&this.displayPreview(this.canvases.get("preview").dataset.currentIndex)}onFontChange(){window.clearTimeout(this.timeout),this.timeout=window.setTimeout(this.init.bind(this),1e3)}swapFonts(){const t=this.font1input.value,e=this.font2input.value,n=this.results.length;this.font1input.value=e,this.font2input.value=t;for(let t=0;t<n;t++)this.results[t].images.reverse();this.restorePreview()}resetContext(t=this.contexts.get("working")){t.fillStyle=this.backgroundColor,t.fillRect(0,0,this.canvases.get("working").width,this.canvases.get("working").height),t.fillStyle=this.fillColor}renderString(t,e,n=this.contexts.get("working"),i=!0){const s=Math.floor(this.fontSize),r=Math.floor(1.5*this.fontSize);n.font=`${this.fontSize}px ${e}`,n.fillText(t,s,r);const a=createImageBitmap(this.canvases.get("working"));return i&&this.resetContext(),a}getDiff(t){const e=this.contexts.get("working");e.drawImage(t[0],0,0),e.globalCompositeOperation="difference",e.drawImage(t[1],0,0),e.globalCompositeOperation="source-over";const n=e.getImageData(0,0,this.canvases.get("working").width,this.canvases.get("working").height);return new Uint8ClampedArray(n.data)}getUnion(t){this.contexts.get("working")}async calculateDifference(t){this.resetContext();const e=await Promise.all([this.renderString(t,this.font1),this.renderString(t,this.font2)]),n=this.getDiff(e),i=n.length;let s=0;for(let t=0;t<i;t+=4)s+=n[t]/255*(n[t+3]/255);return{char:t,diffImage:n,difference:s,images:e}}getImageInColor(t,e){this.resetContext()}async rankDifferences(t){const e=await Promise.all(t.split("").map((t=>this.calculateDifference(t))));this.results=e.sort(((t,e)=>e.difference-t.difference)),window.dispatchEvent(this.event)}displayResults(){const t=this.results,e=document.querySelector(".results");e.innerHTML="<table><thead><tr><th>Character</th><th>Difference</th></tr></thead><tbody></tbody></table>";const n=e.querySelector("tbody"),i=this.results.length;for(let e=0;e<i;e++){const i=document.createElement("tr");i.dataset.rank=e+1,i.innerHTML=`<td>${t[e].char}</td><td>${t[e].difference}</td>`,n.appendChild(i)}}displayPreview(t){const e=this.results[t],n=this.contexts.get("preview");this.resetContext(n),n.fillStyle="rgba(255, 0, 0, 0.5)",this.renderString(e.char,this.font1,n,!1),n.fillStyle="rgba(0, 0, 255, 0.25)",this.renderString(e.char,this.font2,n,!1),this.canvases.get("preview").dataset.currentIndex=t}resultsRowClick(t){const e=t.target.closest("tr");e&&e.dataset.rank&&this.displayPreview(e.dataset.rank-1)}}new FontCompare;
//# sourceMappingURL=index-min.js.map